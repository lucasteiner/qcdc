#!/usr/bin/env python3
import pandas as pd
import numpy as np
import sys
import matplotlib as mpl
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
#from energydiagram import ED
from sklearn.cluster import DBSCAN
from sklearn.decomposition import PCA

# Print the file location of the energydiagram module
# print(energydiagram.__file__)

# Set the name of the script
thisname = sys.argv[0][:-3]

# Load data from JSON file and set 'RootFile' as the index
data = pd.read_json("data.json")
data = data.set_index('RootFile')

# Define column names for easier access
dg = 'Chemical Potential for Liquids'
ccn = 'Censo Conformer Number'
spe = 'Single Point Energy'
xyz = 'xyz Coordinates'
xyz_name = 'xyz File Name'

# Test accessing data
fphthal_spe = data[spe]['./qcdc_test_data/f2omef/censo/CONF1/pbe0-d4/control']
#print(fphthal_svp)

fphthal_xyz = data[xyz]['./qcdc_test_data/f2omef/censo/CONF1/pbe0-d4/control']
#print(fphthal_xyz)

# Set index to data of one conformer
fphthal_index = data.index[data.index.str.contains('./qcdc_test_data/f2omef/censo/')]
fphthal_index = fphthal_index[fphthal_index.str.contains('/pbe0-d4/control')]
fphthal = data.loc[fphthal_index]
lst = []
for index in fphthal_index:
    lst.append(fphthal[xyz][index])
arr = np.asarray(lst)
print(arr)
shape = arr.shape
pca_input = arr.reshape(shape[0], shape[1]*shape[2])
pca_input.shape

pca = PCA(n_components=3)
xyz_pca = pca.fit_transform(pca_input)
xyz_pca.shape

# Apply DBSCAN clustering
clustering = DBSCAN(eps=2.0, min_samples=2)
labels = clustering.fit(xyz_pca).labels_

# Create a 3D scatter plot
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# Get unique labels
unique_labels = np.unique(labels)

# Plot each cluster with a different color
colors = plt.cm.nipy_spectral(np.linspace(0, 1, len(unique_labels)))

for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black color for noise
        col = 'k'
        marker = 'x'
    else:
        marker = 'o'

    class_member_mask = (labels == k)
    
    xyz = xyz_pca[class_member_mask]
    ax.scatter(xyz[:, 0], xyz[:, 1], xyz[:, 2], c=[col], marker=marker, label=f'Cluster {k}' if k != -1 else 'Noise')

# Add title and labels
ax.set_title('3D PCA Scatter Plot with DBSCAN Clustering')
ax.set_xlabel('PCA Component 1')
ax.set_ylabel('PCA Component 2')
ax.set_zlabel('PCA Component 3')

plt.legend()
#plt.show()

lst = []
for index in fphthal_index:
    lst.append(fphthal[spe][index])
energies = np.asarray(lst)
energies = energies - energies.min()
#print(spe)
shape = energies.shape

# Print or analyze the mapping of data points to clusters
#for i, (name, energy, cluster) in enumerate(zip(data[ccn][fphthal_index], energies, labels)):
#    print(f"Data point {i}: {name}, {energy} -> Cluster {cluster}")

# Create a list of tuples containing the name, energy, and cluster
data_tuples = list(zip(fphthal[ccn], energies, labels))

# Sort the list of tuples based on the energy values (second item in each tuple)
sorted_data = sorted(data_tuples, key=lambda x: x[1])

# Print the sorted data
for i, (name, energy, cluster) in enumerate(sorted_data):
    print(f"Data point {i}: {name}, {energy} -> Cluster {cluster}")
#print(fphthal_index)
print(fphthal_index)